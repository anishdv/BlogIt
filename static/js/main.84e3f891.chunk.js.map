{"version":3,"sources":["components/card/Card.js","components/Pagination/Pagination.js","components/Footer/Footer.js","components/NavBar/NavigationBar.js","Pages/HomePage/Body.js","components/AuthorCard/AuthorCard.js","components/FilterHeader/FilterHeader.js","components/ShortPost/ShortPost.js","components/UserPostsList/UserPostList.js","Pages/ProfilePage/Profile.js","components/postCard/PostCard.js","components/comments/Comment.js","Pages/PostPage/PostPage.js","Pages/MostLikedPost/MostLikedPost.js","App.js","serviceWorker.js","index.js"],"names":["memo","props","className","style","width","padding","backgroundColor","border","margin","name","to","id","aria-label","pageNo","isNaN","color","NavigationBar","pathName","useMemo","window","location","pathname","useState","isOpen","setIsOpen","toggle","useCallback","Navbar","dark","expand","NavItem","NavbarToggler","onClick","Collapse","navbar","Nav","split","initialUsers","loading","users","error","reducer","state","action","type","payload","Body","match","useReducer","dispatchState","useEffect","startIndex","params","data","db","authors","slice","parseInt","Container","Row","map","user","Col","key","md","sm","xs","firstName","lastName","page","author","phone","numPosts","numLikes","activeButton","ascDate","dscDate","ascLike","dscLike","date","Date","title","toLocaleDateString","whichSort","comment","like","posts","length","post","datePublished","Profile","setPosts","setAuthor","setActiveButton","fetchPost","a","filter","authorId","fetchUser","i","j","temp","reverse","PostCard","authorName","setauthorName","fetchData","description","userName","setUserName","src","alt","text","PostPage","setPost","comments","setComments","setLoading","console","log","fetchComments","coment","postId","undefined","MostLikedPost","isLoading","setIsLoading","swap","items","leftIndex","rightIndex","partition","left","right","pivot","Math","floor","quickSort","index","numComments","App","exact","path","component","AuthorPage","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.84e3f891.chunk.js","sourcesContent":["import React, {memo} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div\r\n      className=\"card specialCard mx-auto\"\r\n      style={{\r\n        width: '18rem',\r\n        padding: '20px',\r\n        backgroundColor: 'rgb(246,246,246)',\r\n        border: 'none',\r\n        margin: '15px',\r\n      }}\r\n    >\r\n      \r\n      <div className=\"card-body text-center\">\r\n        <h5 className=\"card-title text-black-50\">{props.name}</h5>\r\n\r\n        <Link\r\n          className=\"btn btn-primary text-white font-weight-bold\"\r\n          to={`/Profile/${props.id}`}\r\n          id={props.id}\r\n        >\r\n          Click to view Profile\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default memo(Card)\r\n","import React, {memo} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nfunction Pagination(props) {\r\n  return (\r\n    <nav aria-label=\"Page navigation example\">\r\n      <ul className=\"pagination justify-content-center pagination-lg p-4\">\r\n        <li\r\n          className={`page-item ${\r\n            props.pageNo === 1 || props.pageNo === 0 || isNaN(props.pageNo)\r\n              ? 'disabled'\r\n              : ''\r\n          }`}\r\n        >\r\n          <Link className=\"page-link\" to={`/${props.pageNo - 1}`}>\r\n            Previous\r\n          </Link>\r\n        </li>\r\n\r\n        <li className=\"page-item\">\r\n          <p\r\n            className=\"page-link\"\r\n            style={{backgroundColor: 'black', color: 'white'}}\r\n          >\r\n            {isNaN(props.pageNo) || props.pageNo === 0 ? '1' : props.pageNo}\r\n          </p>\r\n        </li>\r\n\r\n        <li className=\"page-item\">\r\n          <Link\r\n            className=\"page-link\"\r\n            to={`/${\r\n              isNaN(props.pageNo) || props.pageNo === 0 ? '2' : props.pageNo + 1\r\n            }`}\r\n          >\r\n            Next\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default memo(Pagination)\r\n","import React, {memo} from 'react'\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"card-footer text-muted text-center font-weight-bolder p-5 m-2\">\r\n      Made with &hearts; by Anish Devnani\r\n    </div>\r\n  )\r\n}\r\nexport default memo(Footer)\r\n","import React, {useState, useEffect, useCallback, useMemo} from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap'\r\nimport './NavigationBar.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\n// import {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\n// import App from \"../../App.js\"\r\n\r\nfunction NavigationBar() {\r\n  let pathName = useMemo(\r\n    () => window.location.pathname,\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [window.location.pathname],\r\n  )\r\n\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const toggle = useCallback(() => setIsOpen(!isOpen), [isOpen])\r\n\r\n  return (\r\n    <div className=\"navBar1\">\r\n      <Navbar\r\n        color=\"dark\"\r\n        dark\r\n        className=\"fixed-top d-flex justify-content-between\"\r\n        expand=\"md\"\r\n      >\r\n        <NavItem>\r\n          <Link to=\"/\" className=\"text-white\">\r\n            BlogIt\r\n          </Link>\r\n        </NavItem>\r\n        <NavbarToggler onClick={toggle} style={{width: 'auto'}} />\r\n        <Collapse\r\n          className=\"\"\r\n          isOpen={isOpen}\r\n          navbar\r\n          style={{\r\n            color: 'white',\r\n            width: 'auto',\r\n          }}\r\n        >\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <Link to=\"/\" onClick={toggle}>\r\n                <p\r\n                  className={`m-2 ${\r\n                    !!!pathName.split('/')[1] ? 'text-white' : 'text-secondary '\r\n                  }`}\r\n                >\r\n                  {' '}\r\n                  Authors\r\n                </p>\r\n              </Link>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n              <Link to=\"/MostLikedPost\" onClick={toggle}>\r\n                <p\r\n                  className={`m-2 ${\r\n                    pathName.split('/')[1] === 'MostLikedPost'\r\n                      ? 'text-white'\r\n                      : 'text-secondary'\r\n                  }`}\r\n                >\r\n                  {' '}\r\n                  MostLikedPost\r\n                </p>\r\n              </Link>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n              <Link to=\"/MostCommentPost\" onClick={toggle}>\r\n                <p\r\n                  className={` m-2 ${\r\n                    pathName.split('/')[1] === 'MostCommentPost'\r\n                      ? 'text-white'\r\n                      : 'text-secondary'\r\n                  }`}\r\n                >\r\n                  {' '}\r\n                  MostCommentPost\r\n                </p>\r\n              </Link>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavigationBar\r\n","import React, {useReducer, useEffect} from 'react'\r\nimport {Container, Row, Col} from 'reactstrap'\r\nimport Card from '../../components/card/Card'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport axios from 'axios'\r\nimport Pagination from '../../components/Pagination/Pagination'\r\nimport Footer from '../../components/Footer/Footer'\r\nimport NavigationBar from '../../components/NavBar/NavigationBar'\r\nimport db from '../../utils/db.json'\r\n\r\nconst initialUsers = {\r\n  loading: true,\r\n  users: [],\r\n  error: '',\r\n  pageNo: 1,\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_SUCCESS':\r\n      return {\r\n        loading: action.loading,\r\n        users: action.payload,\r\n        error: '',\r\n        pageNo: action.pageNo,\r\n      }\r\n    case 'FETCH_ERROR':\r\n      return {\r\n        loading: false,\r\n        users: [],\r\n        error: 'Something Went Wrong!!!',\r\n        pageNo: 1,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction Body({match}) {\r\n  const [state, dispatchState] = useReducer(reducer, initialUsers)\r\n\r\n  useEffect(() => {\r\n    let startIndex = ((match.params.pageNo || 1) - 1) * 18\r\n    const data = db.authors.slice(startIndex, startIndex + 18)\r\n    dispatchState({\r\n      type: 'FETCH_SUCCESS',\r\n      payload: data,\r\n      error: '',\r\n      loading: false,\r\n      pageNo: parseInt(match.params.pageNo),\r\n    })\r\n  }, [match])\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {/* It is usefull when we fetch data from server */}\r\n        {state.error !== '' ? (\r\n          <h1 className=\"text-center\">{state.error}</h1>\r\n        ) : (\r\n          ''\r\n        )}\r\n        {state.loading ? (\r\n          <h1 className=\"text-center\">Loading... Please Wait...</h1>\r\n        ) : (\r\n          ''\r\n        )}\r\n        <Row>\r\n          {state.users.map(user => {\r\n            return (\r\n              <Col key={user.id} md={4} sm={6} xs={12}>\r\n                <Card\r\n                  name={`${user.firstName} ${user.lastName}`}\r\n                  id={user.id}\r\n                />\r\n              </Col>\r\n            )\r\n          })}\r\n        </Row>\r\n        <Pagination page=\"/\" pageNo={state.pageNo} />\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\nexport default Body\r\n","import React, { memo } from \"react\";\r\n\r\nfunction AuthorCard({ author }) {\r\n  return (\r\n    <div className=\"cardProfile\">\r\n      <h1>{author.firstName + \" \" + author.lastName}</h1>\r\n      <p className=\"title text-secondary\">mobile : {author.phone}</p>\r\n      <p>POSTS : {author.numPosts}</p>\r\n      <p>LIKES : {author.numLikes}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(AuthorCard);\r\n","import React, {memo} from 'react'\r\n\r\nfunction FilterHeader({activeButton, ascDate, dscDate, ascLike, dscLike}) {\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"btn-group btn-group-lg text-center w-100 p-4\">\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-primary ${\r\n            activeButton === 'ascDate' ? 'active' : ''\r\n          }`}\r\n          onClick={ascDate}\r\n        >\r\n          Assending By date\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-primary ${\r\n            activeButton === 'dscDate' ? 'active' : ''\r\n          }`}\r\n          onClick={dscDate}\r\n        >\r\n          Decending By date\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-primary ${\r\n            activeButton === 'ascLike' ? 'active' : ''\r\n          }`}\r\n          onClick={ascLike}\r\n        >\r\n          Assending By Like\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-primary ${\r\n            activeButton === 'dscLike' ? 'active' : ''\r\n          }`}\r\n          onClick={dscLike}\r\n        >\r\n          Decending By Like\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default memo(FilterHeader)\r\n","import React, {memo, useMemo} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction ShortPost(props) {\r\n  let date = useMemo(() => new Date(props.date), [props.date])\r\n  return (\r\n    <Link to={`/Post/${props.id}`}>\r\n      <h5 className=\"list-group-item row\">\r\n        <span className=\"d-inline-block col-sm-4 text-primary\">\r\n          {props.title}\r\n        </span>\r\n        <span className=\"d-inline-block col-sm-4 text-right text-info\">\r\n          {date.toLocaleDateString()}\r\n        </span>\r\n        <span className=\"d-inline-block col-sm-4 text-danger text-right \">\r\n          {props.whichSort === 'numComments' ? `Comments   ` : 'Likes '}{' '}\r\n          {props.whichSort === 'numComments' ? props.comment : props.like}\r\n        </span>\r\n      </h5>\r\n    </Link>\r\n  )\r\n}\r\nexport default memo(ShortPost)\r\n","import React, {memo} from 'react'\r\nimport Post from '../ShortPost/ShortPost'\r\nfunction UserPostList({posts}) {\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {posts.length === 0 ? (\r\n        <h1 className=\"text-center\">loading.... </h1>\r\n      ) : (\r\n        posts.map(post => {\r\n          return (\r\n            <Post\r\n              key={post.id}\r\n              title={post.title}\r\n              like={post.numLikes}\r\n              date={post.datePublished}\r\n              id={post.id}\r\n            />\r\n          )\r\n        })\r\n      )}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default memo(UserPostList)\r\n","import React, {useState, useEffect, useCallback} from 'react'\r\nimport './profile.css'\r\n\r\nimport Footer from '../../components/Footer/Footer'\r\nimport NavigationBar from '../../components/NavBar/NavigationBar'\r\nimport db from '../../utils/db.json'\r\nimport AuthorCard from '../../components/AuthorCard/AuthorCard'\r\nimport FilterHeader from '../../components/FilterHeader/FilterHeader'\r\nimport UserPostList from '../../components/UserPostsList/UserPostList'\r\n\r\nfunction Profile({match}) {\r\n  const [posts, setPosts] = useState([]) // for Seting Post\r\n  const [author, setAuthor] = useState({}) // for Setting Author\r\n  const [activeButton, setActiveButton] = useState('') // for active Button\r\n\r\n  // for fetching Post from server\r\n  const fetchPost = useCallback(async id => {\r\n    let posts = db.posts.filter(post => post.authorId === parseInt(id))\r\n\r\n    setPosts(posts)\r\n  }, [])\r\n\r\n  // fetching user\r\n  const fetchUser = useCallback(async id => {\r\n    const user = db.authors[id]\r\n    setAuthor(user)\r\n  }, [])\r\n\r\n  // for retriveing post\r\n  useEffect(() => {\r\n    fetchPost(match.params.authorId)\r\n  }, [fetchPost, match.params.authorId])\r\n\r\n  //for retriving user\r\n  useEffect(() => {\r\n    fetchUser(match.params.authorId)\r\n  }, [fetchUser, match.params.authorId])\r\n\r\n  // Sorting By Assending Date\r\n  const ascDate = useCallback(() => {\r\n    setActiveButton('ascDate')\r\n    let data = posts\r\n\r\n    // bubble sort for shorting time complexity = O(n * n)\r\n    for (let i = 0; i < data.length; i++) {\r\n      for (let j = 0; j < data.length - i - 1; j++) {\r\n        if (data[j].datePublished > data[j + 1].datePublished) {\r\n          let temp = data[j]\r\n          data[j] = data[j + 1]\r\n          data[j + 1] = temp\r\n        }\r\n      }\r\n    }\r\n\r\n    setPosts([...data])\r\n  }, [posts])\r\n\r\n  // Sorting By decending Date\r\n  const dscDate = useCallback(() => {\r\n    setActiveButton('dscDate')\r\n    let data = posts\r\n\r\n    // bubble sort for shorting time complexity = O(n * n)\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      for (let j = 0; j < data.length - i - 1; j++) {\r\n        if (data[j].datePublished > data[j + 1].datePublished) {\r\n          let temp = data[j]\r\n          data[j] = data[j + 1]\r\n          data[j + 1] = temp\r\n        }\r\n      }\r\n    }\r\n    setPosts([...data.reverse()])\r\n  }, [posts])\r\n\r\n  // Sorting By Assending Like\r\n  const ascLike = useCallback(() => {\r\n    setActiveButton('ascLike')\r\n    let data = posts\r\n\r\n    // bubble sort for shorting time complexity = O(n * n)\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      for (let j = 0; j < data.length - i - 1; j++) {\r\n        if (data[j].numLikes > data[j + 1].numLikes) {\r\n          let temp = data[j]\r\n          data[j] = data[j + 1]\r\n          data[j + 1] = temp\r\n        }\r\n      }\r\n    }\r\n\r\n    setPosts([...data])\r\n  }, [posts])\r\n\r\n  // Sorting By decending Like\r\n  const dscLike = useCallback(() => {\r\n    setActiveButton('dscLike')\r\n    let data = posts\r\n\r\n    // bubble sort for shorting time complexity = O(n * n)\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      for (let j = 0; j < data.length - i - 1; j++) {\r\n        if (data[j].numLikes > data[j + 1].numLikes) {\r\n          let temp = data[j]\r\n          data[j] = data[j + 1]\r\n          data[j + 1] = temp\r\n        }\r\n      }\r\n    }\r\n\r\n    setPosts([...data.reverse()])\r\n  }, [posts])\r\n\r\n  return (\r\n    <div>\r\n      {/* Author Details */}\r\n      <AuthorCard author={author} />\r\n\r\n      <div className=\"container\">\r\n        <h3 className=\"pt-4 pl-4 pb-3\">Posts</h3>\r\n\r\n        {/* Filter Header */}\r\n        <FilterHeader\r\n          activeButton={activeButton}\r\n          ascDate={ascDate}\r\n          dscDate={dscDate}\r\n          ascLike={ascLike}\r\n          dscLike={dscLike}\r\n        />\r\n\r\n        <UserPostList posts={posts} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Profile\r\n","import React, {useState, useEffect, useCallback} from 'react'\r\nimport './PostPage.css'\r\nimport db from '../../utils/db.json'\r\n\r\nfunction PostCard(props) {\r\n  const [authorName, setauthorName] = useState('')\r\n\r\n  const fetchData = useCallback(() => {\r\n    const user = db.authors[props.authorId]\r\n\r\n    setauthorName(user.firstName + ' ' + user.lastName)\r\n  }, [props.authorId])\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [fetchData])\r\n\r\n  return (\r\n    <div className=\"card w-100\">\r\n      <h1>{props.title}</h1>\r\n      <div className=\" p-5 \">\r\n        <div className=\"mainContent mx-auto\">{props.description}</div>\r\n      </div>\r\n      <p className=\"title text-secondary\">\r\n        Date : {new Date(props.date).toLocaleDateString()}\r\n      </p>\r\n      <p>Author : {authorName}</p>\r\n      <p>LIKES : {props.numLikes}</p>\r\n    </div>\r\n  )\r\n}\r\nexport default PostCard\r\n","import React, {useState, useEffect, memo, useCallback} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport db from '../../utils/db.json'\r\nfunction Comment(props) {\r\n  const [userName, setUserName] = useState('')\r\n\r\n  const fetchData = useCallback(async () => {\r\n    const user = db.authors[props.data.authorId]\r\n\r\n    setUserName(user.firstName + ' ' + user.lastName)\r\n  }, [props.data.authorId])\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [fetchData])\r\n\r\n  return (\r\n    <Link to={`/Profile/${props.data.authorId}`}>\r\n      <li className=\"media p-4\">\r\n        <div>\r\n          <img\r\n            src={`https://joeschmoe.io/api/v1/${userName}`}\r\n            className=\"mr-3 text-center\"\r\n            alt=\"...\"\r\n            width=\"50px\"\r\n          />\r\n          <div className=\"media-body\">\r\n            <h5 className=\"mt-0 mb-1\">{userName}.</h5>\r\n            <label className=\"font-italic font-weight-bold\">Comment:</label>\r\n            <span className=\"ml-3\">{props.data.text}</span>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default memo(Comment)\r\n","import React, {useState, useEffect, useCallback} from 'react'\r\nimport PostCard from '../../components/postCard/PostCard'\r\nimport NavigationBar from '../../components/NavBar/NavigationBar'\r\nimport './PostPage.css'\r\nimport Comment from '../../components/comments/Comment'\r\nimport db from '../../utils/db.json'\r\nfunction PostPage({match}) {\r\n  const [post, setPost] = useState({})\r\n  const [comments, setComments] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const fetchPost = useCallback(id => {\r\n    const post = db.posts[id]\r\n    console.log({post})\r\n    setPost({...post})\r\n  }, [])\r\n\r\n  const fetchComments = useCallback(id => {\r\n    console.log('Before fetch comment ')\r\n    const data = db.comments.filter(\r\n      coment => parseInt(coment.postId) === parseInt(id),\r\n    )\r\n    console.log('After fetch comment ', data)\r\n    setLoading(false)\r\n    setComments([...data])\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    fetchPost(match.params.postId)\r\n  }, [fetchPost, match.params.postId])\r\n\r\n  useEffect(() => {\r\n    fetchComments(match.params.postId)\r\n  }, [fetchComments, match.params.postId])\r\n\r\n  return (\r\n    <div>\r\n      {post.title === undefined ? (\r\n        <h1>Loading....</h1>\r\n      ) : (\r\n        <PostCard\r\n          title={post.title}\r\n          authorId={post.authorId}\r\n          date={post.datePublished}\r\n          numLikes={post.numLikes}\r\n          description={post.description}\r\n        />\r\n      )}\r\n\r\n      <h4 className=\"mt-4 text-center\">Comments</h4>\r\n      <div className=\"comment-box d-flex justify-content-center\">\r\n        <br></br>\r\n        <ul className=\"list-unstyled m-4 \">\r\n          {loading ? (\r\n            <h1>loading</h1>\r\n          ) : comments.length === 0 ? (\r\n            <h1>No comment </h1>\r\n          ) : (\r\n            comments.map(comment => <Comment key={comment.id} data={comment} />)\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostPage\r\n","import React, {useState, useEffect, useMemo, useCallback} from 'react'\r\nimport NavigationBar from '../../components/NavBar/NavigationBar'\r\nimport Post from '../../components/ShortPost/ShortPost'\r\nimport db from '../../utils/db.json'\r\nfunction MostLikedPost() {\r\n  let whichSort = useMemo(\r\n    () =>\r\n      window.location.pathname.split('/')[1] === 'MostLikedPost'\r\n        ? 'numLikes'\r\n        : 'numComments',\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [window.location.pathname],\r\n  )\r\n\r\n  const [posts, setPosts] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  // const [whichSort , setWhichSort] = useState()\r\n\r\n  //quick sort    time complexity  O(n*logn)\r\n  const swap = useCallback((items, leftIndex, rightIndex) => {\r\n    var temp = items[leftIndex]\r\n    items[leftIndex] = items[rightIndex]\r\n    items[rightIndex] = temp\r\n  }, [])\r\n\r\n  const partition = useCallback(\r\n    (items, left, right) => {\r\n      var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n        i = left, //left pointer\r\n        j = right //right pointer\r\n      while (i <= j) {\r\n        while (items[i][whichSort] < pivot[whichSort]) {\r\n          i++\r\n        }\r\n        while (items[j][whichSort] > pivot[whichSort]) {\r\n          j--\r\n        }\r\n        if (i <= j) {\r\n          swap(items, i, j) //swap two elements\r\n          i++\r\n          j--\r\n        }\r\n      }\r\n      return i\r\n    },\r\n    [swap, whichSort],\r\n  )\r\n\r\n  const quickSort = useCallback(\r\n    (items, left, right) => {\r\n      var index\r\n      if (items.length > 1) {\r\n        index = partition(items, left, right) //index returned from partition\r\n        if (left < index - 1) {\r\n          //more elements on the left side of the pivot\r\n          quickSort(items, left, index - 1)\r\n        }\r\n        if (index < right) {\r\n          //more elements on the right side of the pivot\r\n          quickSort(items, index, right)\r\n        }\r\n      }\r\n      return items\r\n    },\r\n    [partition],\r\n  )\r\n\r\n  // end of quick sort\r\n  const fetchPost = useCallback(() => {\r\n    let data = db.posts\r\n\r\n    let result = quickSort(data, 0, data.length - 1)\r\n\r\n    data = result.reverse().slice(0, 10)\r\n    // console.log(data)\r\n    setIsLoading(false)\r\n    setPosts([...data])\r\n  }, [quickSort])\r\n\r\n  useEffect(() => {\r\n    fetchPost()\r\n  }, [fetchPost, whichSort])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <ul className=\"list-group\">\r\n          {isLoading ? (\r\n            <h1 className=\"text-center\">Loading... Please Wait....</h1>\r\n          ) : (\r\n            posts.map(post => (\r\n              <Post\r\n                key={post.id}\r\n                title={post.title}\r\n                like={post.numLikes}\r\n                date={post.datePublished}\r\n                id={post.id}\r\n                comment={post.numComments}\r\n                whichSort={whichSort}\r\n              />\r\n            ))\r\n          )}\r\n\r\n          {/* <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post> */}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MostLikedPost\r\n","import React from 'react'\r\nimport './App.css'\r\n// import { Button } from \"reactstrap\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nimport Body from './Pages/HomePage/Body'\r\nimport AuthorPage from './Pages/ProfilePage/Profile'\r\n// import Pagination from \"./components/Pagination/Pagination\"\r\n\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\nimport PostPage from './Pages/PostPage/PostPage'\r\nimport MostLikedPost from './Pages/MostLikedPost/MostLikedPost'\r\nimport NavigationBar from './components/NavBar/NavigationBar'\r\nimport Footer from './components/Footer/Footer'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <NavigationBar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Body} />\r\n          <Route exact path=\"/MostLikedPost\" component={MostLikedPost} />\r\n          <Route exact path=\"/MostCommentPost\" component={MostLikedPost} />\r\n          <Route exact path=\"/:pageNo\" component={Body} />\r\n          <Route exact path=\"/profile/:authorId\" component={AuthorPage} />\r\n          <Route exact path=\"/Post/:postId\" component={PostPage} />\r\n        </Switch>\r\n        <Footer />\r\n        {/* <Body/> */}\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    \r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}